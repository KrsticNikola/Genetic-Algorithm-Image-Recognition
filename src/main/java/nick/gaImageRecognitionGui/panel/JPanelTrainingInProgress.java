/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nick.gaImageRecognitionGui.panel;

import nick.gaImageRecognitionCore.api.IApiTrainer;
import nick.gaImageRecognitionCore.ga.Fitness;
import nick.gaImageRecognitionCore.individual.Individual;
import nick.gaImageRecognitionCore.individual.IndividualType;
import nick.gaImageRecognitionCore.util.ConfigurationUtil;
import nick.gaImageRecognitionCore.util.TrainingRules;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author Nick
 */
public class JPanelTrainingInProgress extends BasePanel {

    private final IApiTrainer trainer;
    private final int INITIAL_REFRESH_RATE = 5000; // in SEConds

    //refresh timer
    private Timer refreshTimer;

    public JPanelTrainingInProgress(IApiTrainer trainer) {
        super(null);
        initComponents();
        initLabelValues();
        this.trainer = trainer;
        trainer.startTraining();
//        new Thread(trainer).start();

        startRefreshTimer();

//        timer = new Timer(speed, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonStopTraining = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelSavedConfigLoc = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(640, 480));

        jButtonStopTraining.setText("Stop");
        jButtonStopTraining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopTrainingActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabelSavedConfigLoc.setText("Saved at..");

        jLabel1.setText("Refresh rate (msec)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonStopTraining)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelSavedConfigLoc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStopTraining)
                    .addComponent(jLabelSavedConfigLoc)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStopTrainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopTrainingActionPerformed

        //stop training
        trainer.stopTraining();

        //stop timmer
        refreshTimer.stop();

        saveConfiguration();

        //disable stop button
        jButtonStopTraining.setEnabled(false);


    }//GEN-LAST:event_jButtonStopTrainingActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonStopTraining;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelSavedConfigLoc;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    @Override
    final void initLabelValues() {
        jLabelSavedConfigLoc.setVisible(false);
    }

    private void startRefreshTimer() {

        jTextArea1.append("--------------- TRAINING STARTED -----------------------------------");
        jTextArea1.append(System.lineSeparator());
        jTextArea1.append("Training rules: " + trainer.getTrainingRules());
        jTextArea1.append(System.lineSeparator());
        jTextArea1.append("--------------------------------------------------------------------");
        jSpinner1.setValue(INITIAL_REFRESH_RATE);
        activateTimer(INITIAL_REFRESH_RATE); 
        
       
    }

    private void saveConfiguration() {
        Individual fittestIndividual = trainer.getPopulation().getFittest();
        Individual[] selectedIndividuals = new Individual[1];
        selectedIndividuals[0] = fittestIndividual;
//        String fileNameAsTimestamp = new SimpleDateFormat("yyyyMMddhhmm'.txt'").format(new Date());
        String configLocation = "src/main/resources/config/";

        String realPath = ConfigurationUtil.saveConfiguration(selectedIndividuals, configLocation);
        //show saved location
        jLabelSavedConfigLoc.setText("Config saved at: " + realPath);
        jLabelSavedConfigLoc.setVisible(true);
        
        TrainingRules trainingRules = trainer.getTrainingRules();
        
        int populationSize = trainer.getPOPULATION_SIZE();
        IndividualType individualType = trainingRules.getIndividualType();
        float minFeaturePercentage =  trainingRules.getMIN_FEATURE_PERCENTAGE();
        float thrashholdMedianPercentage = trainingRules.getTRASHHOLD_MEDIAN_PERCENTAGE();
        int minThreshhold = trainingRules.getMIN_TRASHHOLD();
        int maxThreshhold = trainingRules.getMAX_TRASHHOLD();
        int numberOfFeatures = trainingRules.getMAX_NUMBER_OF_FEATURES();
        Fitness fitness = selectedIndividuals[0].getFitness();
//        int numberOfSamples = FitnessCalculation.getInstance().getTrainingIntegralImages().size();
//        int numberOfFalseSamples = FitnessCalculation.getInstance().getFalseIntegralImages().size();
        
        ConfigurationUtil.saveTrainingParams(populationSize, individualType, minFeaturePercentage, thrashholdMedianPercentage, minThreshhold, maxThreshhold, numberOfFeatures, fitness, realPath);

    }

    private void activateTimer(int REFRESH_RATE) {
        refreshTimer = new Timer(REFRESH_RATE, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String text = String.valueOf(trainer.getGenerationCount());
                Fitness bestFitness = trainer.getPopulation().getFittest().getFitness();
                jTextArea1.append("Generation count: " + text);
                jTextArea1.append(System.lineSeparator());
                jTextArea1.append("Fitness: " + bestFitness);
                jTextArea1.append(System.lineSeparator());
                if (refreshTimer.getDelay() != (int) jSpinner1.getValue()) {
                    refreshTimer.setDelay((int) jSpinner1.getValue());
                }
            }
        });
        refreshTimer.start();
    }
     
}
